{"/home/travis/build/npmtest/node-npmtest-smoketail/test.js":"/* istanbul instrument in package npmtest_smoketail */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-smoketail/lib.npmtest_smoketail.js":"/* istanbul instrument in package npmtest_smoketail */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_smoketail = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_smoketail = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-smoketail/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-smoketail && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_smoketail */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_smoketail\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_smoketail.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_smoketail.rollup.js'] =\n            local.assetsDict['/assets.npmtest_smoketail.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_smoketail.__dirname + '/lib.npmtest_smoketail.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-smoketail/node_modules/smoketail/index.js":"var cwlog = require('./lib/cwlog');\n\nmodule.exports = {\n    CWLogFilter            : cwlog.CWLogFilter,\n    CWLogFilterEventStream : cwlog.CWLogFilterEventStream,\n    CWLogEventToMessage    : cwlog.CWLogEventToMessage\n};\n","/home/travis/build/npmtest/node-npmtest-smoketail/node_modules/smoketail/lib/cwlog.js":"var aws         = require('aws-sdk'),\n    util        = require('util'),\n    Readable    = require('stream').Readable,\n    Transform   = require('stream').Transform,\n    q           = require('q'),\n    isArray     = util.isArray,\n    lib         = {};\n\n/**\n * CWLogFilter\n * A simple cursor type wrapper for the aws CloudWatchLogs filterLogEvents method.\n * \n * @class CWLogFilter\n * @constructor\n * @param {Object} [opts={apiVersion:'2014-03-28',region:'us-east-1'} ] Configuration options\n *      for the instance. This will be passed to the AWS.CloudWatchLogs constructor.  \n *      See [AWS Javascript SDK documentation](http://docs.aws.amazon.com/AWSJavaScriptSDK/\n *      latest/AWS/CloudWatchLogs.html#constructor-property) for full description of\n *      available settings.\n */\n\nfunction CWLogFilter(opts){\n    opts = opts || { };\n    opts.apiVersion  = '2014-03-28';\n    opts.region      = opts.region || 'us-east-1';\n\n    this._cwLogs    = new aws.CloudWatchLogs(opts);\n    this._params    = null;\n}\n\n/**\n * Make initial call to filterLogEvents.\n *\n * @method open\n * @param {Object} params The parameters to pass to the filterLogEvents call.  See \n *      [AWS Documentation](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/\n *      CloudWatchLogs.html#filterLogEvents-property) for all supported options.\n * @return {Promise} A promise that will be resolved with the result of filterLogEvents.\n */\nCWLogFilter.prototype.open = function(params) {\n    var self = this, myParams = null;\n    self._params = null;\n    myParams = lib.copyFilterParams(params);\n    \n    return q.ninvoke(this._cwLogs,'filterLogEvents',myParams)\n        .then(function(res){\n            self._params = myParams;\n            self._params.nextToken = res.nextToken;\n            return res;\n        });\n};\n\n/**\n * Calls to next will re-call the aws api, using the params passed to the open method, \n * along with the nextToken received on the previous aws response.\n *\n * @method next\n * @return {Promise} A promise that will be resolved with the result of filterLogEvents.\n */\nCWLogFilter.prototype.next = function(){\n    var self = this;\n    \n    if ((!this._params) || (!this._params.nextToken)) {\n        return q();\n    }\n    \n    return q.ninvoke(this._cwLogs,'filterLogEvents',this._params)\n        .then(function(res){\n            if (res.nextToken) {\n                self._params.nextToken = res.nextToken;\n            } else {\n                delete self._params.nextToken;\n            }\n            return res;\n        });\n};\n\n/**\n * Detect whether there are subsequent records left on the filter.\n *\n * @method eof\n * @return {boolean} True if there are no more records (last aws response contained no nextToken).\n */\nCWLogFilter.prototype.eof = function(){\n    return ((!this._params) || (!this._params.nextToken));\n\n};\n\n/**\n * CWLogFilterEventStream\n * Implements a readable stream for getting CloudWatch Log Events via the filterLogEvents\n * API.  All standard Readable Streaming methods and events should be supported, however\n * the data returned are unencoded Event objects returned by the AWS api.\n * \n * @class CWLogFilterEventStream\n * @constructor\n * @param {Object} params Parameters that will be passed to AWS filterLogEvents API call, with\n *      an additional supported option, \"follow\".  If follow is set to true, the stream\n *      will remain open and make periodic calls (default is 1 second intervals) to re-using\n *      the initial filter Parameters to check for additional log data, using the max last\n *      received event time + 1 as the start time. To override default inteval, use\n *      \"followInterval\" with your desired interval (in milliseconds).  See [AWS Documentation]\n *      (http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CloudWatchLogs.html#\n *      filterLogEvents-property) for all supported options.\n * @param {Object} [opts={apiVersion:'2014-03-28',region:'us-east-1'} ] AWS config options\n *      for the instance. This will be passed to the AWS.CloudWatchLogs constructor.  \n *      See [AWS Javascript SDK documentation](http://docs.aws.amazon.com/AWSJavaScriptSDK/\n *      latest/AWS/CloudWatchLogs.html#constructor-property) for full description of\n *      available settings.\n */\n\nfunction CWLogFilterEventStream(filterParams, cwOpts) {\n    Readable.call(this, { highWaterMark: 102400, objectMode : true });\n    this._cwOpts             = cwOpts;    \n    this._filterParams       = lib.copyFilterParams(filterParams);\n    this._follow             = !!filterParams.follow;\n    this._followInterval     = filterParams.followInterval || 1000;\n    this._reading            = false;\n    this._ival               = null;\n    this._closed             = false;\n    var self = this;\n\n    this.on('pause',function(){\n        if (self._closed) {\n            self.emit('error',new Error('Unable to pause a closed stream.'));\n        } else {\n            self._stopFollow();\n        }\n    });\n    \n    this.on('resume',function(){\n        if (self._closed) {\n            self.emit('error',new Error('Unable to resume a closed stream.'));\n        } else {\n            self._startFollow();\n        }\n    });\n}\n\nutil.inherits(CWLogFilterEventStream, Readable);\n\n/**\n * Stops checks for further logs and invalidates the stream. Will emit a 'close' event,\n * and 'end' event. After close has been called, the stream is invalid and cannot be\n * re-used.\n *\n * @method close\n */\nCWLogFilterEventStream.prototype.close = function(){\n    this._closed = true;\n    this._stopFollow();\n    this.push(null);\n    this.emit('close');\n};\n\n/* Stream API */\nCWLogFilterEventStream.prototype._read = function(){\n    if (this._closed) {\n        this.emit('error',new Error('Unable to read a closed stream.'));\n    } else {\n        this._startFollow();\n    }\n};\n\nCWLogFilterEventStream.prototype._startFollow = function(){\n    var self = this;\n    if ((self._follow) && (!self._ival) && (!self._closed)) {\n        self._ival = setInterval(function(){\n            self._readFilter();\n        },self._followInterval);\n    }\n    this._readFilter();\n};\n\nCWLogFilterEventStream.prototype._stopFollow = function(){\n    if (this._ival) {\n        clearInterval(this._ival);\n        this._ival = null;\n    }\n};\n\nCWLogFilterEventStream.prototype._readFilter = function() {\n    if (this._reading) {\n        return q();\n    }\n\n    var self = this, filter = lib.createCWLogFilter(this._cwOpts), lastTimestamp = 0;\n\n    function iterateFilter(res){\n        var idx, eventCount, data;\n        if (!res || !res.events) { \n            return filter;\n        }\n        eventCount = res.events.length;\n        for (idx = 0; idx < eventCount; idx++) {\n            data = res.events[idx];\n            lastTimestamp = Math.max(lastTimestamp,data.timestamp);\n            if (!self.push(data)){\n                return filter; \n            }\n        }\n\n        if (filter.eof()){\n            return filter;\n        }\n\n        return filter.next().then(iterateFilter);\n    }\n\n    this._reading = true;\n    return filter.open(this._filterParams)\n    .then(iterateFilter)\n    .then(function(){\n        if (!self._follow) {\n            self.close();\n        } else {\n            if (lastTimestamp > (self._filterParams.startTime || 0 )) {\n                self._filterParams.startTime = lastTimestamp + 1;\n            }\n        }\n        \n        self._reading = false;\n    })\n    .catch(function(err){\n        self.emit('error',err);\n        self._reading = false;\n    });\n};\n\n/**\n * CWLogEventToMessage\n * Transforms CWFilterEventStream log event objects into strings.\n * \n * @class CWLogEventToMessage\n * @constructor\n * @param {Object} opts Options for how to format the results.\n *      opts.crunchTabs - If true, will convert tabs to spaces.\n */\nfunction CWLogEventToMessage(opts){\n    if (opts && opts.crunchTabs) {\n       this._crunchTabs = true;  \n    }\n    Transform.call(this, { objectMode : true });\n}\n\nutil.inherits(CWLogEventToMessage, Transform);\n\nCWLogEventToMessage.prototype._transform = function(chunk, encoding, done) {\n    if ((chunk.message === undefined) || (chunk.timestamp === undefined)){\n        return done();\n    }\n\n    var message = chunk.message;\n    if (this._crunchTabs) {\n        message = chunk.message.replace(/\\t/,' '); \n    }\n\n    if (message.charAt(message.length - 1) !== '\\n') {\n        message += '\\n';\n    }\n\n    if (message.match(/^\\d\\d\\d\\d-\\d\\d-\\d\\d\\D/)){\n        this.push(message);\n    } else {\n        this.push((new Date(chunk.timestamp)).toISOString() + ' ' + message);\n    }\n    done();\n};\n\n/******************************\n * Utils \n */\n\n/**\n * Makes a copy of filterLogEvent parameters, omitting cruft\n */\nlib.copyFilterParams = function(params){\n    var myParams = null;\n    [   'logGroupName','logStreamNames','startTime','endTime','filterPattern',\n        'nextToken','limit','interleaved' ].forEach(function(prop){\n        if (params[prop]) {\n            myParams = myParams || {};\n            if (isArray(params[prop])){\n                myParams[prop] = params[prop].concat(); \n            } else {\n                myParams[prop] = params[prop];\n            }\n        }\n    });\n    return myParams;\n};\n\n/**\n * Mainly used to make it easier to mock a filter for testing the filter stream\n */\nlib.createCWLogFilter = function(opts) {\n    return new CWLogFilter(opts);\n};\n\n\n/******************************\n * Exports \n */\nmodule.exports.util                      = lib;\nmodule.exports.CWLogFilter               = CWLogFilter;\nmodule.exports.CWLogFilterEventStream    = CWLogFilterEventStream;\nmodule.exports.CWLogEventToMessage       = CWLogEventToMessage;\nmodule.exports.logEventToMessage         = new CWLogEventToMessage();\n\n","/home/travis/build/npmtest/node-npmtest-smoketail/node_modules/smoketail/Gruntfile.js":"var path = require('path');\n\nmodule.exports = function (grunt) {\n\n    var initProps = {\n            packageInfo : grunt.file.readJSON('package.json')\n        };\n\n    initProps.name = function() {\n        return this.packageInfo.name;\n    };\n\n    require('load-grunt-config')(grunt, {\n        configPath: path.join(__dirname, 'tasks/options'),\n        config: {\n            settings: initProps\n        }\n    });\n    grunt.loadTasks('tasks');\n\n    grunt.registerTask('default', function(){\n        grunt.task.run('jshint');\n        grunt.task.run('test');\n    });\n\n    grunt.task.renameTask('jasmine','test');\n};\n","/home/travis/build/npmtest/node-npmtest-smoketail/node_modules/smoketail/bin/smoketail.js":"#!/usr/bin/env node\nvar program   = require('commander'),\n    pkg       = require('../package.json'),\n    cwl       = require('../lib/cwlog'),\n    filter, filterOpts = { }, awsOpts;\n\n\nprocess.on('uncaughtException', function(err) {\n    process.stderr.write(err.message + '\\n');\n    process.exit(1);\n});\n\nfunction parseDateArg(v) {\n    if (!v)                         { return new Date(NaN); }\n    if (v.toLowerCase() === 'now')  { return new Date(); }\n    if (v.match(/^-\\d+/))           { return new Date(Date.now() + (parseInt(v,10) * 1000)); }\n    if (v.match(/^\\d+$/))           { return new Date(parseInt(v,10)); }\n    return new Date(v);\n}\n\nprogram\n    .usage('[options] <logGroupName>')\n    .version(pkg.version)\n    .option('-i, --interleaved', 'Interleave the log results. (auto on if using -f).')\n    .option('-f, --follow', 'When at the end of the logstream, ' +\n        'poll for more messages.')\n    .option('-p, --pattern <pattern>', 'CloudWatch Logs filter pattern.')\n    .option('-r, --region <region>','Set the AWS region for your logGroup. ' +\n        'Default is us-east-1.','us-east-1')\n    .option('-s, --streams <s1,s2,s3>','Comma spearateed list of logStreamNames.',\n            function(v) { return v.split(','); })\n    .option('-t, --time-range <start>..<end>','Start and end range for events.',\n            function(v) { return v.split('..').map(parseDateArg);})\n    .action(function(logGroupName){\n        filterOpts.logGroupName = logGroupName;\n    });\n\nprogram.on('--help',function(){\n    console.log('  Getting Started');\n    console.log('  ---------------');\n    console.log('  smoketail is a utility wrapping calls to the AWS node.js api ' +\n                  'CloudWatchLogs::filterLogEvents.' );\n    console.log('  Authenticate via default methods supported by the sdk.' +\n                 ' More information available at: ');\n    console.log('  https://aws.amazon.com/sdk-for-node-js/ ' );\n    console.log('');\n    console.log('  Time Ranges');\n    console.log('  -----------');\n    console.log('  Either end of a time range is optional.  Accepts string and int formats' +\n                  'taken by the Javascript');\n    console.log('  Date constructor. If passed a negative, will interpet as now - seconds' +\n                 ' (ie -300 is 5 minutes ago).');\n    console.log('');\n    console.log('  Examples:');\n    console.log('');\n    console.log('    $ smoketail my/logGroup -t -60');\n    console.log('    $ smoketail my/logGroup -t -300..-60');\n    console.log('    $ smoketail my/logGroup -t 2015-01-01T14:45:00Z..2015-01-01T15:00:00Z');\n    console.log('    $ smoketail my/logGroup -t ..2015-01-01T15:00:00Z');\n    console.log('');\n});\n\nprogram.parse(process.argv);\n\n\nif (!filterOpts.logGroupName) {\n    program.help();\n}\n\nif (program.interleaved) {\n    filterOpts.interLeaved = true;\n}\n\nif (program.pattern) {\n    filterOpts.filterPattern = program.pattern;\n}\n\nif (program.region) {\n    awsOpts = {\n        region : program.region\n    };\n}\n\nif (program.streams) {\n    filterOpts.logStreamNames = program.streams;\n}\n\nif (program.timeRange) {\n    if (program.timeRange[0]) {\n        if (!isNaN(program.timeRange[0].valueOf())){\n            filterOpts.startTime = program.timeRange[0].valueOf();\n        }\n    }\n\n    if (program.timeRange[1]) {\n        if (!isNaN(program.timeRange[1].valueOf())){\n            filterOpts.endTime = program.timeRange[1].valueOf();\n        }\n    }\n}\n\nif (program.follow) {\n    if (filterOpts.endTime) {\n        throw new Error('Cannot use --follow with an ending time range.');\n    }\n    filterOpts.follow = true;\n    filterOpts.interLeaved = true;\n}\n\nfilter = new cwl.CWLogFilterEventStream(filterOpts,awsOpts);\n\nfilter.on('error', function(err){\n    process.stderr.write(err.message + '\\n');\n    process.exit(1);\n});\n\nfilter.pipe(cwl.logEventToMessage).pipe(process.stdout);\n","/home/travis/build/npmtest/node-npmtest-smoketail/node_modules/smoketail/tasks/node_jasmine.js":"var Jasmine = require('jasmine');\n\nvar NAME = 'jasmine';\nvar DESCRIPTION = 'Runs jasmine unit tests via the official jasmine node runner';\n\nmodule.exports = function nodeJamine(grunt) {\n    grunt.registerMultiTask(NAME, DESCRIPTION, function jasmineTask() {\n        var done = this.async();\n        var options = this.options({\n            configure: function() {},\n            defaultReporter: {}\n        });\n        var files = this.filesSrc;\n        var jasmine = new Jasmine();\n\n        jasmine.loadConfig({\n            spec_files: files, // jshint ignore:line\n            spec_dir: '' // jshint ignore:line\n        });\n        options.configure(jasmine);\n        jasmine.configureDefaultReporter(options.defaultReporter);\n        jasmine.onComplete(done);\n\n        jasmine.execute();\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-smoketail/node_modules/smoketail/tasks/options/jshint.js":"module.exports = {\n    options: {\n        jshintrc: 'jshint.json'\n    },\n    all: [\n        'index.js',\n        'Gruntfile.js',\n        'bin/{,*/}*.js',\n        'lib/{,*/}*.js',\n        'tasks/{,*/}*.js'\n    ]\n};\n","/home/travis/build/npmtest/node-npmtest-smoketail/node_modules/smoketail/tasks/options/watch.js":"module.exports = {\n    test: {\n        options: {\n            debounceDelay : 10000,\n            atBegin : true\n        },\n        files: [\n            'index.js',\n            'bin/**/*.js',\n            'lib/**/*.js',\n            'test/**/*.js' \n        ],\n        tasks: ['jshint', 'test:unit' ]\n    }\n};\n"}